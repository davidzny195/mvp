generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId        Int             @id @default(autoincrement())
  username      String          @unique
  email         String          @unique
  password      String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now()) @updatedAt
  pokerRoom     PokerRooms?
  PlayerActions PlayerActions[]
  GameHistory   GameHistory[]
  GameSeats     GamePlayers[]

  @@map("users")
}

model PokerRooms {
  roomId             Int      @id @default(autoincrement())
  playerCount        Int
  currentPlayerCount Int
  roomName           String
  canJoin            Boolean  @default(true)
  roomType           String
  smallBlind         Int
  bigBlind           Int
  ownerId            Int      @unique
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  owner         Users           @relation(fields: [ownerId], references: [userId])
  PlayerActions PlayerActions[]
  GameState     GameState[]
  GameHistory   GameHistory[]
  GameSeats     GamePlayers[]

  @@map("poker_rooms")
}

model GamePlayers {
  id       Int     @id @default(autoincrement())
  roomId   Int
  seatNum  Int
  playerId Int
  isActive Boolean @default(true)

  user Users      @relation(fields: [playerId], references: [userId])
  game PokerRooms @relation(fields: [roomId], references: [roomId])

  @@map("game_players")
}

model PlayerActions {
  actionId     Int      @id @default(autoincrement())
  playerId     Int
  roomId       Int
  roundNumber  Int
  actionType   String[]
  actionAmount Float
  potAmount    Float
  folded       Boolean?
  handCards    String[]

  player Users      @relation(fields: [playerId], references: [userId])
  room   PokerRooms @relation(fields: [roomId], references: [roomId])

  @@map("player_actions")
}

model GameState {
  id               Int      @id @default(autoincrement())
  roomId           Int
  roomPlayers      String[] //need to contain whether or not they folded maybe userId: true/false
  smallBlindPlayer Int
  bigBlindPlayer   Int
  currentPot       Float
  flopCards        String[]
  turnCard         String?
  riverCard        String?
  cardsRemaining   Int
  cardsDealt       Int
  cardsBurned      Int
  activePlayers    Int[]
  lastAction       String?
  gameStage        String
  currentPlayer    Int?
  bettingRound     String?

  room PokerRooms @relation(fields: [roomId], references: [roomId])

  @@map("game_state")
}

model GameHistory {
  id           Int      @id @default(autoincrement())
  roomId       Int
  roundNumber  Int
  playerId     Int
  actionType   String
  actionAmount Float?
  potAmount    Float
  folded       Boolean
  turnOrder    Int
  createdAt    DateTime @default(now())

  player Users      @relation(fields: [playerId], references: [userId])
  room   PokerRooms @relation(fields: [roomId], references: [roomId])

  @@map("game_history")
}
